---

- name: Waiting... Do you want to continue {% if destroy_first == true %}[destroy_first={{ destroy_first }}] and {% endif %}create vault "{{ group }}"? 
  pause:
    seconds: 60
  delegate_to: localhost
  become: false

- name: Destroy "{{ group }}" [destroy_first={{ destroy_first }}]
  shell: |
    systemctl stop vault || true
    systemctl disable vault || true
    rm -rf {{ install_path }} /usr/lib/systemd/system/vault || true
    userdel vault || true
    groupdel vault || true
  when: destroy_first == true

- name: Add group user
  ansible.builtin.group:
    name: vault
    state: present

- name: Add vault user
  ansible.builtin.user:
    name: vault
    system: yes
    shell: /sbin/nologin
    group: vault
    state: present

- name: Create vault "{{ group }}" directory tree for installation
  file:
    path: "{{ item }}"
    state: directory
    recurse: yes
    owner: vault
    group: vault
    mode: 0700
  loop:
    - "{{ install_path }}/bin"
    - "{{ install_path }}/data"
    - "{{ install_path }}/conf/certs"
    - "{{ install_path }}/log"

- name: Set schema to "http{% if tls_name != none %}s{% endif %}" [tls_name={{ tls_name }}]
  ansible.builtin.set_fact:
    schema: "http{% if tls_name != none %}s{% endif %}"
  run_once: true
  delegate_to: localhost
  become: false

- name: Create vault config file for vault "{{ group }}"
  ansible.builtin.template:
    src: vault.hcl.j2
    dest: "{{ install_path }}/conf/vault.hcl"
    owner: vault
    group: vault
    mode: 0600

- name: Create vault environment file for vault "{{ group }}"
  ansible.builtin.template:
    src: vault.env.j2
    dest: "{{ install_path }}/conf/vault.env"
    owner: vault
    group: vault
    mode: 0600

- name: Copy vault binary file for vault "{{ group }}"
  copy:
    src: vault
    dest: "{{ install_path }}/bin/"
    owner: vault
    group: vault
    mode: 0700

- name: Copy certificates for vault "{{ group }}" TLS communications [tls_name={{ tls_name }}]
  copy:
    src: "{{ item }}"
    dest: "{{ install_path }}/conf/certs/"
    owner: vault
    group: vault
    mode: 0600
  loop:
    - "{{ tls_name }}.crt"
    - "{{ tls_name }}.key"
    - rootCA.crt
  when: tls_name != none

- name: Create vault "{{ group }}" service
  ansible.builtin.template:
    src: vault.service.j2
    dest: "/usr/lib/systemd/system/vault.service"
    owner: vault
    group: vault
    mode: 0600

- name: Enable and start vault "{{ group }}" service
  ansible.builtin.systemd:
    name: vault
    enabled: yes
    masked: no
    state: restarted
    daemon_reload: yes
    force: yes

- name: Waiting... starting vault "{{ group }}" services and internal syncronization
  ansible.builtin.pause:
    seconds: 30
  delegate_to: localhost
  become: false

- name: Check if vault "{{ group }}" is already initialized
  environment:
    VAULT_ADDR: "{{ schema }}://{{ ansible_host }}:{{ api_port }}"
    VAULT_SKIP_VERIFY: "true"
    VAULT_FORMAT: "yaml"
  shell: |
    {{ inventory_dir }}/roles/vault/files/vault operator init -status 2>&1
  run_once: true
  delegate_to: localhost
  become: false
  ignore_errors: true
  register: initialized

- name: 'Initialize vault "{{ group }}" [initialized.stdout={{ initialized.stdout }}, initialized.rc: {{ initialized.rc }}]'
  environment:
    VAULT_ADDR: "{{ schema }}://{{ ansible_host }}:{{ api_port }}"
    VAULT_SKIP_VERIFY: "true"
    VAULT_FORMAT: "yaml"
  shell: |
    mkdir -p {{ inventory_dir }}/secrets
    {{ inventory_dir }}/roles/vault/files/vault operator init > {{ inventory_dir }}/secrets/{{ group }}.init.yml
  run_once: true
  delegate_to: localhost
  become: false
  when: initialized.rc == 2

- name: 'Waiting... syncronizing vault initilization to vault "{{ group }}" [initialized.stdout={{ initialized.stdout }}, initialized.rc: {{ initialized.rc }}]'
  ansible.builtin.pause:
    seconds: 30
  delegate_to: localhost
  become: false
  when: initialized.rc == 2

- name: Load unseal keys for vault "{{ group }}" [autounseal_cluster={{ autounseal_cluster }}]
  ansible.builtin.include_vars: "{{ inventory_dir }}/secrets/{{ group }}.init.yml"
  when: autounseal_cluster == none
  run_once: true
  delegate_to: localhost
  become: false

- name: Unseal vault "{{ group }}" [autounseal_cluster={{ autounseal_cluster }}]
  environment:
    VAULT_ADDR: "{{ schema }}://{{ ansible_host }}:{{ api_port }}"
    VAULT_SKIP_VERIFY: "true"
    VAULT_FORMAT: "yaml"
  shell: |
    {{ inventory_dir }}/roles/vault/files/vault operator unseal {{ unseal_keys_hex[0] }} && sleep 1
    {{ inventory_dir }}/roles/vault/files/vault operator unseal {{ unseal_keys_hex[1] }} && sleep 1
    {{ inventory_dir }}/roles/vault/files/vault operator unseal {{ unseal_keys_hex[2] }} && sleep 10
  when: autounseal_cluster == none
  throttle: 1
  delegate_to: localhost
  become: false